/*
 * Author: Jan Van Boghout <github@janvan.wtf>
 *
 * Copyright (c) 2016-2018 MacRabbit.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the
 * Software, and to prepare derivative works of the Software, and
 * to permit third-parties to whom the Software is furnished to do
 * so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the
 * following disclaimer, must be included in all copies of the
 * Software, in whole or in part, and all derivative works of the
 * Software, unless such copies or derivative works are solely in
 * the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN


@interface MRJSWebControllerConfiguration : NSObject

- (instancetype)init NS_UNAVAILABLE;

// Initializes a controller configuration, which serves as a strict (concrete constants must map to constant types 1:1) template for the controllers using it.
// @param functionName JavaScript expression that resolves to a valid function when used from -evaluateJavaScript:... The message send function takes one arbitrary JSON-convertible dictionary argument and should invoke -didReceiveScriptMessageWithBody:
// @param windowConstants A dictionary of native objects to expose to JavaScript as window.constantName. See MRJSContext for info on how JS-exposed API is detected.
- (instancetype)initWithScriptMessageSendFunction:(NSString *)functionName windowConstantTypes:(NSDictionary<NSString *, Class> *)constants NS_DESIGNATED_INITIALIZER;

// Returns a dictionary suitable for MRJSWebControllerConfiguration.initWithScriptMessageSendFunction:windowConstantTypes: based on a concrete constants dictionary passed to MRJSWebController
+ (NSDictionary<NSString *, Class> *)typesForConstants:(NSDictionary<NSString *, NSObject *> *)constants;

// For subclasses to insert into the web page. Safeguards make repeated initialization a no-op.
@property(readonly) NSString *initializationScript;

@end


@interface MRJSWebController : NSObject

// Initializes a controller. An instance of the MRJSWebController base class is not useful, but it provides the logic for its subclasses.
// If queue is non-nil, messages to runtime objects from JavaScript will be invoked on it. Otherwise this will happen on whatever thread -didReceiveScriptMessageWithBody:scriptReplyHandler: is called.
// Subclasses should insert configuration.initializationScript before any JavaScript tries to message the registered constants.
- (instancetype)initWithConfiguration:(MRJSWebControllerConfiguration *)configuration windowConstants:(NSDictionary<NSString *, NSObject *> *)constants queue:(nullable dispatch_queue_t)queue NS_DESIGNATED_INITIALIZER;
- (instancetype)init NS_UNAVAILABLE;

// Returns the configuration used by this controller. Typically only needed to access the initialization script.
@property(readonly) MRJSWebControllerConfiguration *configuration;

// Must be implemented by subclasses. Should support being called from any thread. The completion handler will be invoked on an arbitrary thread.
- (void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(nullable void (^)(id __nullable result, NSError *__nullable error))completionHandler;

// Must be invoked by subclasses with the converted result of scriptMessageSendFunction. Should typically not be overridden. Note that any JS-exposed objects will be messaged on the current thread. If evalHandler is non-nil, it will be invoked on an arbitrary thread instead of -evaluateJavaScript:completionHandler: to send the reply message. If the message send doesn't require a reply, evalHandler will still be invoked with a nil argument.
- (void)didReceiveScriptMessageWithBody:(nullable id)result scriptReplyHandler:(nullable void (^)(NSString *__nullable stringToEvaluate))evalHandler;

@end


// Exposed functions that require asynchronous work to be done can return an MRJSWebPromise (exclusive to MRJSWebController).
@interface MRJSWebPromise<T : NSObject *> : NSObject
- (void)fulfill:(nullable T)value;
@end

NS_ASSUME_NONNULL_END
