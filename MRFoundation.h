/*
 * Author: Jan Van Boghout <github@janvan.wtf>
 *
 * Copyright (c) 2011-2018 MacRabbit.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the
 * Software, and to prepare derivative works of the Software, and
 * to permit third-parties to whom the Software is furnished to do
 * so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the
 * following disclaimer, must be included in all copies of the
 * Software, in whole or in part, and all derivative works of the
 * Software, unless such copies or derivative works are solely in
 * the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN


// Source annotations
#define var __auto_type
#define let const __auto_type


// Semaphore-based locking
typedef dispatch_semaphore_t MRLockRef;
#define MRLockCreate() dispatch_semaphore_create(1)
#define MRLock(lockRef) dispatch_semaphore_wait(lockRef, DISPATCH_TIME_FOREVER)
#define MRUnlock(lockRef) dispatch_semaphore_signal(lockRef)

#if __has_feature(objc_arc) && OS_OBJECT_USE_OBJC_RETAIN_RELEASE
#define MRDeallocLock(lockRef)
#else
#define MRDeallocLock(lockRef) dispatch_release(lockRef)
#endif


// Utilities
#define MRKindOfClassOrNil(className, object) ((className *)__MRKindOfClassOrNil([className class], object))
#define MRMemberOfClassOrNil(className, object) ((className *)__MRMemberOfClassOrNil([className class], object))
#define NSStringFromBool(arg) ((arg) ? @"YES" : @"NO")


// Additions
@interface NSMapTable (MRFoundation)
- (nullable id)objectForKeyedSubscript:(id)key;
- (void)setObject:(id)value forKeyedSubscript:(id)key;
@end

@interface NSJSONSerialization (MRFoundation)
+ (nullable NSString *)stringWithJSONObject:(id)obj options:(NSJSONWritingOptions)opt error:(NSError *__nullable*__nullable)error;
@end


NS_ASSUME_NONNULL_END



// Implementation

NS_INLINE __nullable id __MRKindOfClassOrNil(__nonnull Class expectedClass, __nullable id object)
{
    return [object isKindOfClass:expectedClass] ? object : nil;
};

NS_INLINE __nullable id __MRMemberOfClassOrNil(__nonnull Class expectedClass, __nullable id object)
{
    return [object class] == expectedClass ? object : nil;
};
