/*
 * Author: Jan Van Boghout <github@janvan.wtf>
 *
 * Copyright (c) 2011-2018 MacRabbit.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the
 * Software, and to prepare derivative works of the Software, and
 * to permit third-parties to whom the Software is furnished to do
 * so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the
 * following disclaimer, must be included in all copies of the
 * Software, in whole or in part, and all derivative works of the
 * Software, unless such copies or derivative works are solely in
 * the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#import <Foundation/Foundation.h>
#import <JavaScriptCore/JavaScriptCore.h>

NS_ASSUME_NONNULL_BEGIN


// Cast returned functions to one of the concrete types below.
typedef id __nullable MRJSFunctionBlock;
typedef id __nullable (^MRJSFunctionBlock0)(NSError *__nullable *__nullable outRuntimeError);
typedef id __nullable (^MRJSFunctionBlock1)(id __nullable arg1, NSError *__nullable *__nullable __nullableoutRuntimeError);
typedef id __nullable (^MRJSFunctionBlock2)(id __nullable arg1,
                                            id __nullable arg2, NSError *__nullable *__nullable __nullableoutRuntimeError);
typedef id __nullable (^MRJSFunctionBlock3)(id __nullable arg1,
                                            id __nullable arg2,
                                            id __nullable arg3, NSError *__nullable *__nullable __nullableoutRuntimeError);
typedef id __nullable (^MRJSFunctionBlock4)(id __nullable arg1,
                                            id __nullable arg2,
                                            id __nullable arg3,
                                            id __nullable arg4, NSError *__nullable *__nullable __nullableoutRuntimeError);
typedef id __nullable (^MRJSFunctionBlock5)(id __nullable arg1,
                                            id __nullable arg2,
                                            id __nullable arg3,
                                            id __nullable arg4,
                                            id __nullable arg5, NSError *__nullable *__nullable __nullableoutRuntimeError);

// This is the hard limit for the number of arguments supported by the MRJS/Obj-C bridge
#define kMRJSMaximumNumberOfArgumentsForFunction 9

// Convenience for adding named constants
#define MRJSContextAddEnumConstant(context, constant) [context addConstant:[NSNumber numberWithUnsignedInteger:constant] withName:@#constant]

// Options
typedef NS_ENUM(NSUInteger, MRJSScriptOptions) {

    // When set, overrides the value of canSetGlobalProperties while the script is evaluated
    MRJSScriptCanSetGlobalProperties =    (1 << 0),

    // When set, makes a property value read-only in the JS context (when using setValue:forProperty:...)
    MRJSScriptSetPropertyReadOnly =        (1 << 1),

    // When set, makes a property value impossible to delete in the JS context (when using setValue:forProperty:...)
    MRJSScriptSetPropertyDontDelete =    (1 << 2)
};



/**
 
 How to use the MRJS/Obj-C bridge
 ================================
 
 • By default, MRJS bridges NSString, NSArray, NSNumber and NSRange (JS name: Range). It also exposes a "console" object that can be used to call console.log();
 
 • By default, Objective-C objects are passed into the JS context expose no functionality. You need to explicitly add bridge definitions to access their methods and properties, as indicated below.
 
 • Supporting function calls from JS; e.g. myObj.myFunction(); var result = myObj.myFunctionReturningSomething("foo", 123);

    - Methods must be prefixed with "js_" and use only objects as arguments and return types.
    - Methods must have at least one argument to be bridged as JS functions.
    - Methods must have at most kMRJSMaximumNumberOfArgumentsForFunction.
    - Methods with multiple arguments must use "empty" argument names for argument #2 and beyond.
    - Implement as follows...

     - (void)js_myFunction:(id)ignored;
     - (id)js_myFunctionReturningSomething:(NSString *)stringArgument :(NSNumber *)numericArgument;
 
 • Supporting properties from JS; e.g. myObj.myProperty = 42;

    - Properties must implement two bridge methods, a getter and a setter.
    - Property getters must have an object return type and no arguments.
    - Property setters must have a BOOL return type (to indicate success/failure) and one value argument.
    - Implement as follows...
 
     - (NSNumber *)js_myProperty;
     - (BOOL)js_setMyProperty:(NSNumber *)number;
 
 • Supporting construction from JS; e.g. var myObj = new BridgedObject();

    - Call addConstructorForClass:withName:
    - Implement as follows...

     + (id)new_jsconstructor:(NSString *)string
     {
        return [[self alloc] initWithString:string];
     }
 
 • Enabling a JS bridge for all Objective-C classes conforming to a protocol (instead of targeting one specific class)
 
    - Methods must be prefixed with "js_ifConformsToYourProtocolHere" instead of "js_".
    - Implement a category on NSObject with function and property bridge methods.
    - Implement calls to protocol methods by casting. Recommended tip: #define selfAsYourProtocolHere ((id <YourProtocolHere>)self)
 
 **/



@interface MRJSContext : NSObject

// The context's identifier is optional and purely informational; console messages will contain it.
- (instancetype)initWithIdentifier:(nullable NSString *)identifier NS_DESIGNATED_INITIALIZER;

// Convenience with identifier = nil
- (instancetype)init;

// Adds a class/class name mapping to the context. By default, MRJSContext doesn't allow construction of external classes.
- (void)addConstructorForClass:(Class)objcClass withName:(nullable NSString *)customNameOrNil;

// Adds a global constant to the context with the given name.
- (void)addConstant:(id)objcValue withName:(NSString *)constantName;

// Adds a global include-style function to the context with the given name and implementation. The block should return an expression (typically a variable name) that's used for the return value of the function when called from JavaScript.
- (void)addIncludeFunctionWithName:(NSString *)functionName block:(NSString * (^)(NSString *includeName))block;

// Removes all script-set global properties but leaves constructors, constants and include functions intact.
//- (void)removeAllGlobalProperties;

// If NO, evaluated scripts can't write to global variables. Defaults to NO.
@property(nonatomic) BOOL canSetGlobalProperties;


// Evaluates the given JavaScript in the global context.
- (void)evaluateScript:(NSString *)script options:(MRJSScriptOptions)options origin:(nullable NSString *)origin;

// Sets an object's property to a Cocoa value by first evaluating a script to retrieve the object, then setting the key/value pair.
- (void)setValue:(id)object forProperty:(NSString *)property ofObjectByEvaluatingScript:(NSString *)objectScript options:(MRJSScriptOptions)options;

// Returns an appropriate function block for the given number of arguments. Returns nil if no such function could be found or if there was a parser error.
- (MRJSFunctionBlock)copyFunctionByEvaluatingScript:(NSString *)script argumentCount:(NSUInteger)neededArgumentCount error:(NSError **)outParserError;

@end

extern NSErrorDomain const MRJSContextErrorDomain;

typedef NS_ENUM(NSInteger, MRJSContextErrorCode) {
    MRJSContextParserError,            // Check NSLocalizedDescriptionKey for an NSString representation of the JS error
    MRJSContextRuntimeError,        // Check NSLocalizedDescriptionKey for an NSString representation of the JS error
    MRJSContextEvaluationError,        // Check NSLocalizedDescriptionKey for an NSString representation of the JS error
    MRJSContextTimedOutError        // See MRJSWebController
};

extern NSErrorUserInfoKey const MRJSContextErrorOriginKey;
extern NSErrorUserInfoKey const MRJSContextErrorLineNumberKey;
extern NSErrorUserInfoKey const MRJSContextErrorStackTraceKey;

NS_ASSUME_NONNULL_END
