/*
 * Author: Jan Van Boghout <github@janvan.wtf>
 *
 * Copyright (c) 2016-2018 MacRabbit.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the
 * Software, and to prepare derivative works of the Software, and
 * to permit third-parties to whom the Software is furnished to do
 * so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the
 * following disclaimer, must be included in all copies of the
 * Software, in whole or in part, and all derivative works of the
 * Software, unless such copies or derivative works are solely in
 * the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

import Cocoa
import WebKit


class MRJSWebViewController : MRJSWebController, WKScriptMessageHandler, WKNavigationDelegate, WKUIDelegate
{
    private static let messageHandlerName = "__mrjs_webView_msgReceive"
    @objc let webView: WKWebView
    
    @objc init(windowConstants: [String: NSObject]) {
        let contentController = WKUserContentController()
        let webConfiguration = WKWebViewConfiguration()
        webConfiguration.userContentController = contentController
        webConfiguration.suppressesIncrementalRendering = true
        webView = ResponderChainIgnoringWebView(frame: .zero, configuration: webConfiguration)
        
        let messageFunctionName = "window.__mrjs_webView_msgSend"
        let configuration = MRJSWebControllerConfiguration(scriptMessageSendFunction: messageFunctionName, windowConstantTypes: MRJSWebControllerConfiguration.types(forConstants: windowConstants))
        super.init(configuration: configuration, windowConstants: windowConstants, queue: .main)

        let msgSendInitializationScript =
        """
        (function(){
            if (typeof window!=='undefined' && typeof \(messageFunctionName)==='undefined') {
                \(messageFunctionName) = function(payload){
                    window.webkit.messageHandlers.\(MRJSWebViewController.messageHandlerName).postMessage(payload);
                };
            }
        })();
        """

        contentController.addUserScript(WKUserScript(source: msgSendInitializationScript + configuration.initializationScript, injectionTime: .atDocumentStart, forMainFrameOnly: true))
        contentController.add(self, name: MRJSWebViewController.messageHandlerName)

        webView.navigationDelegate = self
        webView.uiDelegate = self
    }
    
    final override func evaluateJavaScript(_ javaScriptString: String, completionHandler: ((Any?, Error?) -> Void)?) {
        webView.evaluateJavaScript(javaScriptString, completionHandler: completionHandler)
    }
    
    final func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
        if message.name == MRJSWebViewController.messageHandlerName {
            didReceiveScriptMessage(withBody: message.body)
        }
    }
    
    func webView(_ webView: WKWebView, decidePolicyFor action: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        decisionHandler(action.navigationType == .other ? .allow : .cancel)
    }

    
    private class ResponderChainIgnoringWebView : WKWebView
    {
        // Don't let users reload the page manually
        override func validateMenuItem(_ menuItem: NSMenuItem) -> Bool {
            return false
        }
    }
}
